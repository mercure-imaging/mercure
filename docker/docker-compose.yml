version: "3.9"
x-env: &env
  environment:
    MERCURE_RUNNER: docker

x-volumes: &volumes
  volumes:
    - config:/opt/mercure/config
    - data:/opt/mercure/data

x-volumes-docker: &volumes-docker
  volumes:
    - config:/opt/mercure/config
    - data:/opt/mercure/data
    - /var/run/docker.sock:/var/run/docker.sock

x-docker-user: &docker-user
  user: "mercure:${GID}"
  
services:
  ui:
    <<: [*docker-user, *volumes-docker, *env]
    depends_on:
      db:
        condition: service_healthy
    image: mercureimaging/mercure-ui${IMAGE_TAG}
    restart: always
    ports:
      - "8000:8000"
  
  db:
    image: library/postgres:alpine
    restart: always
    env_file:
      - /opt/mercure/config/db.env
    environment:
      POSTGRES_USER: mercure
      POSTGRES_DB: mercure
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "15432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U mercure" ]

  receiver:
    image: mercureimaging/mercure-receiver${IMAGE_TAG}
    restart: always
    depends_on:
      bookkeeper:
        condition: service_healthy
    ports:
      - "11112:11112"
    <<: [*volumes, *env]

  cleaner:
    image: mercureimaging/mercure-cleaner${IMAGE_TAG}
    restart: always
    depends_on:
      bookkeeper:
        condition: service_healthy
    <<: [*volumes, *env]

  dispatcher:
    image: mercureimaging/mercure-dispatcher${IMAGE_TAG}
    restart: always
    depends_on:
      bookkeeper:
        condition: service_healthy
    <<: [*volumes, *env]
  
  processor:
    <<: [*docker-user, *volumes-docker, *env]
    image: mercureimaging/mercure-processor${IMAGE_TAG}
    restart: always
    depends_on:
      bookkeeper:
        condition: service_healthy

  router:
    image: mercureimaging/mercure-router${IMAGE_TAG}
    restart: always
    depends_on:
      bookkeeper:
        condition: service_healthy
    <<: [*volumes, *env]

  bookkeeper:
    image: mercureimaging/mercure-bookkeeper${IMAGE_TAG}
    restart: always
    depends_on:
      db:
        condition: service_healthy
    <<: [*volumes, *env]

volumes:
  db-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/mercure/db'

  data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/mercure/data'

  config:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/mercure/config'